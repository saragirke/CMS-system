        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">cmsSystem</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="News" asp-action="Index">Nyheter</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Design" asp-action="Index">Design</a>
                        </li>
                    </ul>
                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>














        
        // POST: Header/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,Title,Font,HeaderFile,LogoFile")] Header header)
        {
            if (ModelState.IsValid)
            {


                    if (header.HeaderFile != null ) {

                    //Spara bilder till wwwroot HEADER
                    string headerfileName = Path.GetFileNameWithoutExtension(header.HeaderFile.FileName);
                    string extension = Path.GetExtension(header.HeaderFile.FileName);


                   //Plockar bort mellanslag i filnam + lägger till timestamp HEADER
                    header.HeaderName = headerfileName = headerfileName.Replace(" ", String.Empty) + DateTime.Now.ToString("yymmssfff") + extension;
                    string path = Path.Combine(wwwRootPath + "/imageupload", headerfileName);

               
                    //Lagra Fil
                    using (var fileStream = new FileStream(path, FileMode.Create)) 
                    {
                        await header.HeaderFile.CopyToAsync(fileStream);
                    }              

                    //Funktion för att ange bildens storlek
                   // createHeaderFile(fileName);

                    

                } /*
                    if (header.LogoFile != null ) {
                    //Spara bilder till wwwroot LOGGA
                    string logofileName = Path.GetFileNameWithoutExtension(header.LogoFile.FileName);
                    string logoextension = Path.GetExtension(header.LogoFile.FileName);

                      //Plockar bort mellanslag i filnam + lägger till timestamp LOGGA
                    header.LogoName = logofileName = logofileName.Replace(" ", String.Empty) + DateTime.Now.ToString("yymmssfff") + logoextension;
                    string logopath = Path.Combine(wwwRootPath + "/imageupload", logofileName);

                     //Lagra Fil
                    using (var fileStream = new FileStream(logopath, FileMode.Create)) 
                    {
                        await header.LogoFile.CopyToAsync(fileStream);
                    }

                     createLogoFile(logofileName);

  }*/


                else {
                    header.HeaderName = null;
                  //  header.LogoName = null;
                }


                _context.Add(header);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(header);
        }s